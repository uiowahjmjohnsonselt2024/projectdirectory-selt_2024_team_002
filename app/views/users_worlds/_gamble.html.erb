<div class='floating-partial-wide-box' id="blackjack_start">
  <h1 id="blackjack_title">Blackjack</h1>
  <p id="blackjack_title_2">Test your luck!</p>
  <p id='shard_balance'>Shards Available: <%= user.available_credits %></p>
  <p id='buy_in'>Buy In: <%= gridsquare.buy_in_amount %></p>
  <div id='player_hand' style='display:none'>
    <p>Your Hand:</p>
    <div id='player_cards'></div>
  </div>
  <div id='dealer_hand' style='display:none'>
    <p>Dealer Hand:</p>
    <div id='dealer_cards'></div>
  </div>
  <p id='status_message'></p>
  <div id="shuffling_message" style="display:none;">Deck has been reshuffled!</div>
  <button id="play_button" class="accept_button" onclick="startGame()" style='display:block'>Play</button>
  <div class="radio-group">
    <div>
      <button id="hit_button" class="accept_button" onclick="hit()" style='display:none; float:right;'>Hit</button>
      <button id="play_hand_button" class="accept_button" onclick="nextHand()" style='display:none; float:right; width: fit-content;'>Play Next Hand</button>
    </div>
    <div>
      <%= form_tag world_path(id: @world.id), method: :get, id: 'end_game_form' do %>
        <button id="end_game_button" class="not_accept_button" style='display:none; float:left; width: fit-content;'>End Session</button>
      <% end %>
      <button id="stand_button" class="accept_button" onclick="stand()" style='display:none'>Stand</button>
    </div>
  </div>
</div>

<script>
    const suits = ['Hearts', 'Diamonds', 'Clubs', 'Spades'];
    const values = ['2', '3', '4', '5', '6', '7', '8', '9', '10', 'J', 'Q', 'K', 'A'];

    let deck = [];
    let playerHand = [];
    let dealerHand = [];
    let playerScore = 0;
    let dealerScore = 0;
    let status = '';

    function initDeck() {
        deck = [];
        suits.forEach(suit => {
            values.forEach(value => {
                deck.push([suit, value]);
            });
        });
        shuffle(deck);


    }

    function shuffle(array) {
        document.getElementById('shuffling_message').style.display = 'block';

        for (let i = array.length - 1; i > 0; i--) {
            const j = Math.floor(Math.random() * (i + 1));
            [array[i], array[j]] = [array[j], array[i]];
        }

        setTimeout(() => {
            document.getElementById('shuffling_message').style.display = 'none';
        }, 2000);
    }

    function dealCard(hand) {
        if (deck.length === 0) {
            initDeck();
            shuffle(deck);
        }
        const card = deck.pop();
        hand.push(card);
        return card;
    }

    function dealLuckyCard(hand){
        if (deck.length === 0) {
            initDeck();
            shuffle(deck);
        }
        for (let i = 0; i < deck.length; i++) {
            if (cardValue(deck[i][1]) > 7 || cardValue(deck[i][1]) < 3) {
                let card = deck[i]
                hand.push(card);
                deck.splice(i, 1);
                return card;
            }
        }
    }

    function displayHand(hand, elementId, hideSecondCard = true) {
        const handElement = document.getElementById(elementId);
        handElement.innerHTML = '';
        const baseUrl = '/cards';

        hand.forEach((card, index) => {
            const cardImage = document.createElement('img');
            if (elementId === 'dealer_cards' && index === 1 && hideSecondCard) {
                cardImage.src = `${baseUrl}/face_down.png`;
                cardImage.alt = 'Face Down';
            } else {
                cardImage.src = `${baseUrl}/${card[1].toLowerCase()}_of_${card[0].toLowerCase()}.png`;
                cardImage.alt = `${card[1]} of ${card[0]}`;
            }
            cardImage.className = 'card';
            handElement.appendChild(cardImage);
        });


    }

    function calculateScore(hand) {
        let values = hand.map(card => cardValue(card[1]));
        let score = values.reduce((a, b) => a + b, 0);
        values.filter(v => v === 11).forEach(() => {
            if (score > 21) score -= 10;
        });
        return score;
    }

    function cardValue(value) {
        if (['J', 'Q', 'K'].includes(value)) return 10;
        if (value === 'A') return 11;
        return parseInt(value, 10);
    }

    function updateScores() {
        playerScore = calculateScore(playerHand);
        dealerScore = calculateScore(dealerHand);
    }

    function checkGameStatus() {
        if (playerScore > 21) {
            status = 'Player Bust! Dealer Wins!';
            document.getElementById('status_message').style.display = 'block';
        } else if (dealerScore > 21) {
            status = 'Dealer Bust! Player Wins!';
            updateUserCredits('win');
            document.getElementById('status_message').style.display = 'block';
        } else if (dealerScore >= 17) {
            if (playerScore > dealerScore) {
                status = 'Player Wins!';
                updateUserCredits('win');
                document.getElementById('status_message').style.display = 'block';
            } else if (playerScore < dealerScore) {
                status = 'Dealer Wins!';
                document.getElementById('status_message').style.display = 'block';
            } else {
                status = 'Push!';
                updateUserCredits('push');
                document.getElementById('status_message').style.display = 'block';
            }
        }
        document.getElementById('status_message').textContent = status;
    }

    function startGame() {
        initDeck();
        nextHand();
        document.getElementById('blackjack_title').style.display = 'none';
        document.getElementById('blackjack_title_2').style.display = 'none';
        document.getElementById('status_message').style.display = 'none';
        document.getElementById('play_button').style.display = 'none';
        document.getElementById('close_gamble_link').style.display = 'none';
    }

    async function nextHand() {
        const csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content");

        try {
            const response = await fetch('/blackjack/buy_in', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'X-CSRF-Token': csrfToken
                },
                body: JSON.stringify({
                    world_id: <%= @world.id %> // Replace with your Rails variable
                })
            });

            const data = await response.json();

            if (!response.ok || !data.has_enough_credits) {
                const statusMessage = document.getElementById('status_message');
                statusMessage.textContent = "Not enough credits to play!";
                statusMessage.style.display = 'block';

                document.getElementById('play_button').style.display = 'none';
                document.getElementById('play_hand_button').style.display = 'none';
                return; // Stop the function
            }

            updateUserCredits('buy_in')
            document.getElementById("close_gamble_link").style.display = "none"
            document.getElementById('status_message').style.display = 'none';

            playerHand = [];
            dealerHand = [];

            if (data.luck_boost) {
                for (let i = 0; i < 2; i++) {
                    dealLuckyCard(playerHand);
                    dealCard(dealerHand);
                }
            }
            else {
                for (let i = 0; i < 2; i++) {
                    dealCard(playerHand);
                    dealCard(dealerHand);
                }
            }

            updateScores();

            displayHand(playerHand, 'player_cards');
            displayHand(dealerHand, 'dealer_cards');


            if (playerScore === 21 && playerHand.length === 2 && dealerScore === 21 && dealerHand.length === 2) {
                status = 'Push! Both Player and Dealer have Blackjack!';
                document.getElementById('status_message').style.display = 'block';
                document.getElementById('status_message').textContent = status;
                document.getElementById('player_hand').style.display = 'block';
                document.getElementById('dealer_hand').style.display = 'block';
                updateUserCredits('push');
                endGame();
                return;
            }

            if (playerScore === 21 && playerHand.length === 2) {
                status = 'Player Blackjack! Player Wins!';
                document.getElementById('status_message').style.display = 'block';
                document.getElementById('status_message').textContent = status;
                document.getElementById('player_hand').style.display = 'block';
                document.getElementById('dealer_hand').style.display = 'block';
                updateUserCredits('win');
                endGame();
                return;
            }

            if (dealerScore === 21 && dealerHand.length === 2) {
                status = 'Dealer Blackjack! Dealer Wins!';
                document.getElementById('status_message').style.display = 'block';
                document.getElementById('status_message').textContent = status;
                document.getElementById('player_hand').style.display = 'block';
                document.getElementById('dealer_hand').style.display = 'block';
                endGame();
                return;
            }

            // Enable gameplay actions
            document.getElementById('player_hand').style.display = 'block';
            document.getElementById('dealer_hand').style.display = 'block';
            document.getElementById('hit_button').style.display = 'block';
            document.getElementById('stand_button').style.display = 'block';
            document.getElementById('play_hand_button').style.display = 'none';
            document.getElementById("end_game_button").style.display = "none"
        } catch (error) {
            console.error('Error checking credits:', error);
            const statusMessage = document.getElementById('status_message');
            statusMessage.textContent = "Error checking credits. Please try again.";
            statusMessage.style.display = 'block';
        }
    }

    function hit() {
        console.log('hit')
        dealCard(playerHand);
        updateScores();
        displayHand(playerHand, 'player_cards');

        if (playerScore === 21) {
            stand();
        }

        if (playerScore > 21) {
            checkGameStatus();
            endGame();
        }
    }

    function stand() {
        console.log('stand');
        while (dealerScore < 17) {
            dealCard(dealerHand);
            updateScores();
        }
        displayHand(dealerHand, 'dealer_cards', false);
        checkGameStatus();
        endGame();
    }

    function endGame() {
        displayHand(dealerHand, 'dealer_cards', false);
        document.getElementById('hit_button').style.display = 'none';
        document.getElementById('stand_button').style.display = 'none';
        document.getElementById('play_hand_button').style.display = 'block';
        document.getElementById('status_message').style.display = 'block';
        document.getElementById("end_game_button").style.display = "block"
    }

    function buyIn() {
        const csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content");
        fetch('/blackjack/buy_in', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': csrfToken
            },
            body: JSON.stringify({
                result: result,
                world_id: <%= @world.id %>
            })
        })
          .then(response => response.json())
          .then(data => {
              const shard_balance = data.shard_balance;
              const success = data.success;
              document.getElementById('shard_balance').textContent = `Shards Available: ${shard_balance}`;
              if (!success) {
                  document.getElementById('play_button').style.display = 'none';
                  alert('Not enough shards to play!');
                  throw new Error('Insufficient shards');
              }
              return true;
          })
          .catch(error => {
              console.error('Error in buy-in process:', error);
              return false;
          });
    }

    function updateUserCredits(result) {
        const csrfToken = document.querySelector("meta[name='csrf-token']").getAttribute("content");
        fetch('/blackjack/update_user_credits', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'X-CSRF-Token': csrfToken
            },
            body: JSON.stringify({
                result: result,
                world_id: <%= @world.id %>
            })
        })
          .then(response => response.json())
          .then(data => {
              const shard_balance = data.shard_balance
              document.getElementById('shard_balance').textContent = `Shards Available: ${shard_balance}`;
          })
          .catch(error => {
              console.error('Error updating credits:', error);
          });
    }
</script>

<script>
    $(document).ready(function(){
        const current_available = <%= user.available_credits %>
        const buy_in = <%= gridsquare.buy_in_amount %>

        if (current_available < buy_in) {
            document.getElementById('play_button').style.display = 'none';
            status = 'Not enough shards to play!';
            document.getElementById('status_message').style.display = 'block';
            document.getElementById('status_message').textContent = status;
        }
    })
</script>

<style>
    .card {
        width: 100px;
        height: auto;
        margin: 5px;
    }

    .floating-partial-box {
        max-height: 80vh;
        overflow-y: auto;
    }

    h1 {
        margin-bottom: 10px; /* Reduces the space below the <h1> */
    }

    p {
        margin-top: 0; /* Removes the top margin of the <p> */
        margin-bottom: 5px; /* Reduces the bottom margin of the <p> */
    }
</style>